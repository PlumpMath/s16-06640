* org-tables

#+tblname: table-1
| exp | calc |
|-----+------|
|   1 |    2 |
|   3 |    4 |
|   5 |    8 |


#+tblname: table-2
| exp | calc |              |
|-----+------+--------------|
|   1 |    2 |         0.01 |
|   3 |    4 | 3.3333333e-3 |
|   5 |    8 |         6e-3 |
#+TBLFM: $3=($2-$1)/$1*100

#+BEGIN_SRC python :var data=table-2
print data
#+END_SRC

#+RESULTS:
: [[1, 2, 0.01], [3, 4, '3.3333333e-3'], [5, 8, '6e-3']]

And inline python code: The number of vibrational modes is src_python{return 3 * 8 - 7} =17=

* [[file:../dft-book/dft.org::*Bulk%20systems][Bulk systems]]
** Setting up bulk structures
- Bulk systems are different than molecules because there is no vacuum space

- Bulk systems are fully periodic in all 3 dimensions

- We typically refer to bulk as solids

- VASP was developed specifically for solid state materials

  - Often crystalline (ordered)

- We define bulk systems with the same pydoc:ase.atoms.Atoms class
  - we specify the position of the atoms
  - and the unit cell

- The unit cell specifies a /lattice/
  - You might recall there are 7 lattice types

- The atoms are the /basis/ of the lattice

- =ase= provides several methods to make common bulk structures
- pydoc:ase.lattice

#+BEGIN_SRC python :results output
from ase.visualize import view
from ase.lattice.cubic import FaceCenteredCubic

atoms = FaceCenteredCubic('Ag')

view(atoms)
#+END_SRC

#+RESULTS:

You should get in the habit of viewing your atoms to make sure they make sense.

#+BEGIN_SRC python :results output
from ase.visualize import view
from ase.lattice.cubic import FaceCenteredCubic

atoms = FaceCenteredCubic('Ag')

view(atoms.repeat((3,3,3)))
#+END_SRC

#+RESULTS:

Does this make sense?

#+BEGIN_SRC python :results output
from ase.visualize import view
from ase.lattice.cubic import FaceCenteredCubic

atoms = FaceCenteredCubic('Ag')
atoms.set_cell([5, 5, 5], scale_atoms=True) # the default behavior does not scale the atoms
view(atoms.repeat((3, 3, 3)))
#+END_SRC


We can control a lot of details of the atoms that get created. The defaults above give us a conventional cell.

pydoc:ase.lattice.cubic.FaceCenteredCubic

To get a primitive cell (one atom), we have to specify more details. We have to specify the directions we want the unit cell vectors in.

You have to know some crystallography to know what directions these are, and they differ for different structures.

#+BEGIN_SRC python :results output
from ase.visualize import view
from ase.lattice.cubic import FaceCenteredCubic

atoms = FaceCenteredCubic('Ag', directions=[[0, 1, 1],
                                            [1, 0, 1],
                                            [1, 1, 0]])

view(atoms)
#+END_SRC


** Reading in data files
- As we saw with molecules where we read in an xyz file, we can read files for solids too

- http://materialsproject.org has a lot of data available

- Consider this CIF file:
# C-c C-v t to tangle this out
#+begin_src text :tangle Ru2O4_1.cif
#\#CIF1.1
##########################################################################
#               Crystallographic Information Format file
#               Produced by PyCifRW module
#
#  This is a CIF file.  CIF has been adopted by the International
#  Union of Crystallography as the standard for data archiving and
#  transmission.
#
#  For information on this file format, follow the CIF links at
#  http://www.iucr.org
##########################################################################

data_RuO2
_symmetry_space_group_name_H-M          'P 1'
_cell_length_a                          3.13970109
_cell_length_b                          4.5436378
_cell_length_c                          4.5436378
_cell_angle_alpha                       90.0
_cell_angle_beta                        90.0
_cell_angle_gamma                       90.0
_chemical_name_systematic               'Generated by pymatgen'
_symmetry_Int_Tables_number             1
_chemical_formula_structural            RuO2
_chemical_formula_sum                   'Ru2 O4'
_cell_volume                            64.8180127062
_cell_formula_units_Z                   2
loop_
  _symmetry_equiv_pos_site_id
  _symmetry_equiv_pos_as_xyz
   1  'x, y, z'

loop_
  _atom_site_type_symbol
  _atom_site_label
  _atom_site_symmetry_multiplicity
  _atom_site_fract_x
  _atom_site_fract_y
  _atom_site_fract_z
  _atom_site_attached_hydrogens
  _atom_site_B_iso_or_equiv
  _atom_site_occupancy
   O  O1  1  0.000000  0.694330  0.694330  0  .  1
   O  O2  1  0.500000  0.805670  0.194330  0  .  1
   O  O3  1  0.000000  0.305670  0.305670  0  .  1
   O  O4  1  0.500000  0.194330  0.805670  0  .  1
   Ru  Ru5  1  0.500000  0.500000  0.500000  0  .  1
   Ru  Ru6  1  0.000000  0.000000  0.000000  0  .  1
#+end_src

#+BEGIN_SRC python :results output
from ase.io import read
from ase.visualize import view

atoms = read('Ru2O4_1.cif')

view(atoms)
#+END_SRC



bibliography:~/dft-book/dft.bib

** From scratch
We can also create bulk atoms from scratch.

#+BEGIN_SRC python
from ase import Atom, Atoms
import numpy as np
from ase.visualize import view
'''
create a TiO2 structure from the lattice vectors at
http://cst-www.nrl.navy.mil/lattice/struk/c4.html
# note: [2014-02-13 Thu] this site no longer exists
'''
a = 4.59 # experimental degrees of freedom.
c = 2.96
u = 0.3  # internal degree of freedom!

#primitive vectors
a1 = a * np.array([1.0, 0.0, 0.0])
a2 = a * np.array([0.0, 1.0, 0.0])
a3 = c * np.array([0.0, 0.0, 1.0])

atoms = Atoms([Atom('Ti', [0., 0., 0.]),
               Atom('Ti', 0.5 * a1 + 0.5 * a2 + 0.5 * a3),
               Atom('O', u * a1 + u * a2),
               Atom('O', -u * a1 - u * a2),
               Atom('O', (0.5 + u) * a1 + (0.5 - u) * a2 + 0.5 * a3),
               Atom('O', (0.5 - u) * a1 + (0.5 + u) * a2 + 0.5 * a3)],
              cell=[a1, a2, a3])

view(atoms)
#+END_SRC

* [[file:../dft-book/dft.org::*Computational%20parameters%20that%20are%20important%20for%20bulk%20structures][Computational parameters that are important for bulk structures]]
