#+DRAWERS: SOLUTION

* Introduction to ASE
https://wiki.fysik.dtu.dk/ase/

- Python modules for
  - creating, visualizing, and analyzing atomic geometries
  - running calculations with different simulation codes

** Atom
https://wiki.fysik.dtu.dk/ase/ase/atom.html

mod:ase.Atom

This is the simplest way to make an atom. This will be an oxygen atom. We can then get properties of the atom by calling functions associated with the Atom object, or by getting /properties/.

#+BEGIN_SRC python
from ase import Atom
a = Atom('O')
print a.get_mass()
print a.mass
#+END_SRC

*************** Quiz: What is the position of the atom?
                :PROPERTIES:
                :END:
mc:None            [[mc:(0, 0, 0)]]             [[mc:(None, None, None)]]

:SOLUTION:
The answer is (0,0,0) which is the default setting.

#+BEGIN_SRC python
from ase import Atom
a = Atom('O')

print a.position
#+END_SRC

#+RESULTS:
: [ 0.  0.  0.]

:END:
*************** END

You can specify the position of an atom like this. We can also change the type of atom by setting its symbol, or number

#+BEGIN_SRC python
from ase import Atom
a = Atom('O', [5, 6, 6])

print a.position

# change atom type
a.set_symbol('W')
print a.mass

a.number = 79
print a.symbol
print a.mass
#+END_SRC

#+RESULTS:
: [ 5.  6.  6.]
: 183.85
: Au
: 196.9665

Exercise: Write a python code to print the symbol and mass of the elements 1-80 using the Atom object.

:SOLUTION:
#+BEGIN_SRC python
from ase import Atom
a = Atom()
for i in range(1, 81):
    a.number = i
    print '{0:3s}{1:1.3f}'.format(a.symbol, a.mass)
#+END_SRC

#+RESULTS:
#+begin_example
H  1.008
He 4.003
Li 6.941
Be 9.012
B  10.811
C  12.011
N  14.007
O  15.999
F  18.998
Ne 20.180
Na 22.990
Mg 24.305
Al 26.982
Si 28.085
P  30.974
S  32.066
Cl 35.453
Ar 39.948
K  39.098
Ca 40.078
Sc 44.956
Ti 47.880
V  50.941
Cr 51.996
Mn 54.938
Fe 55.847
Co 58.933
Ni 58.693
Cu 63.546
Zn 65.390
Ga 69.723
Ge 72.610
As 74.922
Se 78.960
Br 79.904
Kr 83.800
Rb 85.468
Sr 87.620
Y  88.906
Zr 91.224
Nb 92.906
Mo 95.940
Tc nan
Ru 101.070
Rh 102.906
Pd 106.420
Ag 107.868
Cd 112.410
In 114.820
Sn 118.710
Sb 121.757
Te 127.600
I  126.904
Xe 131.290
Cs 132.905
Ba 137.330
La 138.905
Ce 140.120
Pr 140.908
Nd 144.240
Pm nan
Sm 150.360
Eu 151.965
Gd 157.250
Tb 158.925
Dy 162.500
Ho 164.930
Er 167.260
Tm 168.934
Yb 173.040
Lu 174.967
Hf 178.490
Ta 180.948
W  183.850
Re 186.207
Os 190.200
Ir 192.220
Pt 195.080
Au 196.966
Hg 200.590
#+end_example
:END:


The Atom object itself has limited computational value. It lacks structure (e.g. molecular or solid state).

It is the building block for atomic structures we will run calculations on.
# you chose None

** Atoms class
https://wiki.fysik.dtu.dk/ase/ase/atoms.html#module-atoms

- We will usually want to examine /collections/ of atoms

- These atoms will form molecules, bulk structures, and surfaces

- mod:ase.Atoms is a class that does that.

- An Atoms object will be
1. A list of Atom objects
2. A unit cell definition
3. Depending on the DFT code, a definition for periodic boundary conditions
   - In VASP there is only one kind of PBC, so we never consider this.

There are several ways to make a new Atoms object from scratch.

I only like this method of explicit list of atoms. [[file:~/dft-book/dft.org::*From%20scratch][From scratch]]

#+BEGIN_SRC python
from ase import Atoms, Atom

# define an Atoms object
atoms = Atoms([Atom('C',[0., 0.,0.]),
               Atom('O',[1.1,0.,0.])],
              cell=(10, 10, 10))
#+END_SRC


That by itself does not do much. Let us look at some of the properties of the Atoms object.

#+BEGIN_SRC python
from ase import Atoms, Atom

# define an Atoms object
atoms = Atoms([Atom('C', [0., 0.,0.]),
               Atom('O', [1.1,0.,0.])],
              cell=(10, 10, 10))

print atoms.positions
print atoms.get_distance(0, 1)

MW = atoms.get_masses().sum()
print 'MW = ',MW

print atoms.get_volume()
#+END_SRC

#+RESULTS:
: [[ 0.   0.   0. ]
:  [ 1.1  0.   0. ]]
: 1.1
: MW =  28.0104
: 1000.0

You can also read some data files in to create Atoms objects ([[file:~/dft-book/dft.org::*Reading%20other%20data%20formats%20into%20a%20calculation][Reading other data formats into a calculation]])

Below we read in an xyz file that looks like this:

#+BEGIN_EXAMPLE
14

C       0.000000000000000      0.000000000000000      0.376949000000000
H       0.000000000000000      0.000000000000000      1.475269000000000
C       0.000000000000000      1.450290000000000     -0.096234000000000
H       0.000000000000000      1.493997000000000     -1.190847000000000
H      -0.885482000000000      1.984695000000000      0.261297000000000
H       0.885482000000000      1.984695000000000      0.261297000000000
C       1.255988000000000     -0.725145000000000     -0.096234000000000
H       1.293839000000000     -0.746998000000000     -1.190847000000000
H       2.161537000000000     -0.225498000000000      0.261297000000000
H       1.276055000000000     -1.759198000000000      0.261297000000000
C      -1.255988000000000     -0.725145000000000     -0.096234000000000
H      -1.293839000000000     -0.746998000000000     -1.190847000000000
H      -1.276055000000000     -1.759198000000000      0.261297000000000
H      -2.161537000000000     -0.225498000000000      0.261297000000000

#+END_EXAMPLE

We also view the atoms. Note:
1. Use the right mouse button to rotate
2. click on atoms to see their identity and position
3. Ctrl-click to select multiple atoms
  - 2 atoms will show the distance
  - 3 atoms will show the angle
  - 4 atoms will show a dihedral angle
4. If you want to save an image, use the File menu, and put a filename with .png in the dialog box.
5. After you close the window, you may have to type C-g in Emacs to get control back.

#+BEGIN_SRC python
from ase.io import read
from ase.visualize import view

atoms = read('/Users/jkitchin/dft-book/molecules/isobutane.xyz')
atoms.center(vacuum=5)
print atoms

view(atoms)
#+END_SRC

#+RESULTS:



#+CAPTION: Here is the image I saved.
[[./isobutane.png]]

*** [[file:~/dft-book/dft.org::*Predefined%20molecules][Predefined molecules]]

mod:ase has several databases of predefined molecules [[file:../dft-book/dft.org::g2-database][file:../dft-book/dft.org::g2-database]]:

pydoc:ase.data.molecules


Let us use one, and explore rotating the molecule 45 degrees about the x-axis and 45 degrees about the y-axis. We will do the rotation about the center of mass, and we will not rotate the cell.

pydoc:ase.Atoms.rotate

#+BEGIN_SRC python :results output :exports both
from ase.data.molecules import molecule
import numpy as np

atoms = molecule('CH3CN')
print type(atoms) # the molecule function returns an Atoms object

atoms.center(vacuum=6)

print atoms.positions

atoms.rotate('x', np.pi/4, center='COM', rotate_cell=False)
atoms.rotate('y', np.pi/4, center='COM', rotate_cell=False)

print 'After rotation'
print atoms.positions
#+END_SRC

#+RESULTS:
#+begin_example
<class 'ase.atoms.Atoms'>
[[ 6.887664  6.512493  6.37544 ]
 [ 6.887664  6.512493  7.836244]
 [ 6.887664  6.512493  9.014576]
 [ 6.887664  7.537479  6.      ]
 [ 7.775328  6.        6.      ]
 [ 6.        6.        6.      ]]
After rotation
[[ 6.23756944  7.43186555  7.02553456]
 [ 6.96797144  6.39892113  7.75593656]
 [ 7.55713744  5.56571459  8.34510256]
 [ 6.56234244  8.42211627  7.35030756]
 [ 6.42127617  7.33495444  5.95389483]
 [ 5.1659297   7.33495444  7.2092413 ]]
#+end_example

Note: It seems that the ase.data.molecules module is being deprecated. I don't use this module very often. It is useful here to get some practice with using ase.

*** Combining Atoms objects

We will often need to combine two Atoms objects.
  - to study reactions
  - to make more complex structures

We can "add" to Atoms objects together.

#+BEGIN_SRC python :results output
from ase.data.molecules import molecule
from ase.visualize import view

atoms1 = molecule('NH3')

atoms2 = molecule('O2')
atoms2.translate([3, 0, 0])

bothatoms = atoms1 + atoms2
bothatoms.center(5)

view(bothatoms)
#+END_SRC

** [[file:~/dft-book/dft.org::*Simple%20properties][Simple properties]]

See the notes for
- [[file:~/dft-book/dft.org::*Getting%20cartesian%20positions][Getting cartesian positions]]
- [[file:~/dft-book/dft.org::*Molecular%20weight%20and%20molecular%20formula][Molecular weight and molecular formula]]
- [[file:~/dft-book/dft.org::*Center%20of%20mass][Center of mass]]
- [[file:~/dft-book/dft.org::*Moments%20of%20inertia][Moments of inertia]]
- [[file:~/dft-book/dft.org::*Computing%20bond%20lengths%20and%20angles][Computing bond lengths and angles]]

None of the properties require DFT calculations. Almost everything else will require a DFT calculation. Next week, we will examine those.
